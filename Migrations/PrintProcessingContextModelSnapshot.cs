// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintPlusService.Services;

#nullable disable

namespace PrintPlusService.Migrations
{
    [DbContext(typeof(PrintPlusContext))]
    partial class PrintProcessingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("CommonInterfaces.Models.ConfigurationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationSettings", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Duplex")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LangTemplate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MegaFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Print")
                        .HasColumnType("TEXT");

                    b.Property<string>("Printer")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueJobId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .HasColumnType("TEXT");

                    b.Property<string>("XmlFilePath")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.PrinterSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AltPrintPRN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DirectPrint")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GenMF")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GeneratePRN")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PrintMF")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrintQueue")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Staple")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PrinterSettings", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.RFCSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CLIENT")
                        .HasColumnType("TEXT");

                    b.Property<string>("GROUP")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogonLang")
                        .HasColumnType("TEXT");

                    b.Property<string>("MSHOST")
                        .HasColumnType("TEXT");

                    b.Property<string>("MSSERV")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("SYSID")
                        .HasColumnType("TEXT");

                    b.Property<string>("SYSNR")
                        .HasColumnType("TEXT");

                    b.Property<string>("TRACE")
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RFCSettings", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.SapFolderSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OutDir")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("SapPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SapFolderSettings", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("File")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Objtyp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueJobId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkOrders", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.WorkOrderPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeqId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueJobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UniqueJobId", "WorkOrderId");

                    b.ToTable("WorkOrderParts", (string)null);
                });

            modelBuilder.Entity("CommonInterfaces.Models.WorkOrder", b =>
                {
                    b.HasOne("CommonInterfaces.Models.Job", "Job")
                        .WithMany("WorkOrders")
                        .HasForeignKey("UniqueJobId")
                        .HasPrincipalKey("UniqueJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("CommonInterfaces.Models.WorkOrderPart", b =>
                {
                    b.HasOne("CommonInterfaces.Models.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("UniqueJobId", "WorkOrderId")
                        .HasPrincipalKey("UniqueJobId", "WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("CommonInterfaces.Models.Job", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("CommonInterfaces.Models.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderParts");
                });
#pragma warning restore 612, 618
        }
    }
}
